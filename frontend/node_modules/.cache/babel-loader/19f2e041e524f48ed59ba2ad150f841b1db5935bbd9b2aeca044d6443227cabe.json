{"ast":null,"code":"var _jsxFileName = \"/Users/yuvrajrekhi/Documents/Secret Santa/Secret-Santa/frontend/src/Pages/Home.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport InputNames from \"../components/InputNames\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Home() {\n  _s();\n  const [submitted, setSubmitted] = useState(false);\n  const handleSubmit = async (event, names, emails, additionalText, organizerName, setError) => {\n    if (!submitted) {\n      setSubmitted(true);\n      window.scrollTo({\n        top: window.innerHeight,\n        behavior: \"smooth\"\n      });\n      const participantArray = [];\n      for (let i = 0; i < names.length; i++) {\n        const name = names[i];\n        const email = emails[i];\n        const participantObject = {\n          name,\n          email\n        };\n        participantArray.push(participantObject);\n      }\n      console.log(participantArray);\n      event.preventDefault();\n      const namesList = {\n        namesList: names\n      };\n      const generateResponse = await fetch(\"/api/assignments/generate\", {\n        method: 'POST',\n        body: JSON.stringify(namesList),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const json = await generateResponse.json();\n      if (!generateResponse.ok) {\n        setError(json.error);\n      }\n      if (generateResponse.ok) {\n        // create email template objects {emailTo, respectiveAssignment} and make call to /send-emails. Each email will contain who each person is buying for\n        const emailTemplates = [];\n        json.forEach(element => {\n          const {\n            to,\n            from\n          } = element;\n          participantArray.forEach(element => {\n            const {\n              name,\n              email\n            } = element;\n            if (name === from) {\n              emailTemplates.push({\n                email,\n                to\n              });\n            }\n          });\n        });\n        console.log(emailTemplates);\n\n        // make API call to send emails\n        const body = {\n          subject: \"Your Secret Santa Assignment!\",\n          message: additionalText,\n          emailTemplates: emailTemplates,\n          organizerName: organizerName\n        };\n        const emailResponse = await fetch(\"/api/assignments/send-emails\", {\n          method: 'POST',\n          body: JSON.stringify(body),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n      }\n    }\n  };\n  if (!submitted) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"home\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-names\",\n        children: /*#__PURE__*/_jsxDEV(InputNames, {\n          onSubmit: handleSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"home\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-names\",\n        children: /*#__PURE__*/_jsxDEV(InputNames, {\n          onSubmit: handleSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"submitted\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Emails sent!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"If you did not receive emails with your assignments, please reload and ensure emails were typed correctly.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this);\n  }\n}\n_s(Home, \"S6ipnhtDax9I0+B/fnlVz3+f6e8=\");\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["useState","InputNames","jsxDEV","_jsxDEV","Home","_s","submitted","setSubmitted","handleSubmit","event","names","emails","additionalText","organizerName","setError","window","scrollTo","top","innerHeight","behavior","participantArray","i","length","name","email","participantObject","push","console","log","preventDefault","namesList","generateResponse","fetch","method","body","JSON","stringify","headers","json","ok","error","emailTemplates","forEach","element","to","from","subject","message","emailResponse","className","children","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/yuvrajrekhi/Documents/Secret Santa/Secret-Santa/frontend/src/Pages/Home.js"],"sourcesContent":["import { useState } from \"react\";\nimport InputNames from \"../components/InputNames\";\n\nexport default function Home(){\n\n  const [submitted, setSubmitted] = useState(false);\n\n  const handleSubmit = async (event, names, emails, additionalText, organizerName, setError) => {\n    if(!submitted){\n      setSubmitted(true);\n      window.scrollTo({top: window.innerHeight, behavior:\"smooth\"})\n      const participantArray = [];\n      for (let i = 0; i < names.length; i++) {\n        const name = names[i];\n        const email = emails[i];\n        const participantObject = { name, email };\n        participantArray.push(participantObject);\n      }\n      console.log(participantArray)\n      \n      event.preventDefault();\n\n      const namesList = {\n        namesList: names\n      }\n\n      const generateResponse = await fetch(\"/api/assignments/generate\", {\n          method: 'POST',\n          body: JSON.stringify(namesList),\n          headers: {\n              'Content-Type': 'application/json'\n          }\n      })\n\n      const json = await generateResponse.json()\n\n      if (!generateResponse.ok) {\n        setError(json.error)\n      }\n      if (generateResponse.ok) {\n        // create email template objects {emailTo, respectiveAssignment} and make call to /send-emails. Each email will contain who each person is buying for\n        const emailTemplates = [];\n        json.forEach((element) => {\n          const { to, from } = element;\n          participantArray.forEach((element) => {\n            const {name, email} = element;\n            if (name === from){\n              emailTemplates.push({email, to});\n            }\n          })\n        });\n        console.log(emailTemplates)\n\n        // make API call to send emails\n        const body = {\n          subject: \"Your Secret Santa Assignment!\",\n          message: additionalText,\n          emailTemplates: emailTemplates,\n          organizerName: organizerName\n        }\n\n        const emailResponse = await fetch(\"/api/assignments/send-emails\", {\n          method: 'POST',\n          body: JSON.stringify(body),\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        })\n      }\n    }\n    \n\n  }\n\n  if (!submitted){\n    return (\n      <div className=\"home\">\n        <div className = \"input-names\">\n          <InputNames onSubmit = {handleSubmit}></InputNames>\n        </div>\n        <div className=\"footer\"></div>\n      </div>\n    );\n  }else{\n    return (\n      <div className=\"home\">\n        <div className = \"input-names\">\n          <InputNames onSubmit = {handleSubmit}></InputNames>\n        </div>\n        <div className=\"submitted\">\n          <p>Emails sent!</p>\n          <p>If you did not receive emails with your assignments, please reload and ensure emails were typed correctly.</p>\n        </div>\n        <div className=\"footer\"></div>\n      </div>\n    );\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}